<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refactoring on 網站製作學習誌</title>
    <link>https://jaceju.net/tags/refactoring/</link>
    <description>Recent content in Refactoring on 網站製作學習誌</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 09 May 2018 20:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://jaceju.net/tags/refactoring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>重構或重寫 Legacy code 的幾個階段</title>
      <link>https://jaceju.net/steps-of-refactoring-or-rebuilding/</link>
      <pubDate>Wed, 09 May 2018 20:00:00 +0800</pubDate>
      
      <guid>https://jaceju.net/steps-of-refactoring-or-rebuilding/</guid>
      <description>看完前一篇的介紹，我想你應該已經想好面對 legacy code 時，應該要重構還是重寫了。如果你打算對正在線上的程式碼進行重構，那就像在幫飛行中的飛機換引擎一樣</description>
    </item>
    
    <item>
      <title>面對 Legacy Code ，該重構還是重寫？</title>
      <link>https://jaceju.net/refactor-or-rebuild/</link>
      <pubDate>Wed, 09 May 2018 20:00:00 +0800</pubDate>
      
      <guid>https://jaceju.net/refactor-or-rebuild/</guid>
      <description>在程式已經上線很久很久的情況下，公司也找了不少人來維護這些程式碼；而因為開發者來來去去，加上每個人對程式開發的觀念不同，他們也許都有過這樣的</description>
    </item>
    
    <item>
      <title>邁向 PHP 重構之路 - 以 Laravel 程式碼片段為例</title>
      <link>https://jaceju.net/simple-refatoring-example-01/</link>
      <pubDate>Mon, 05 Oct 2015 12:53:48 +0800</pubDate>
      
      <guid>https://jaceju.net/simple-refatoring-example-01/</guid>
      <description>來上 TDD 課的學員問到一個 Laravel 程式碼重構的問題，這裡簡單地做分享。未來如果有好的實戰範例，這系列就會延續下去。 開始重構 當然重構前，我們必須先有測試</description>
    </item>
    
    <item>
      <title>自動測試與 TDD 實務開發 - 上課心得 (中)</title>
      <link>https://jaceju.net/skilltree-tdd-2/</link>
      <pubDate>Sat, 23 May 2015 16:19:43 +0800</pubDate>
      
      <guid>https://jaceju.net/skilltree-tdd-2/</guid>
      <description>曾經有個工程師對著已經上線的網站說：「別說使用者不曉得這個系統是怎麼運作的，其實已經接手那麼久的我也不知道。」 如果你對這句話心有戚戚焉的話，</description>
    </item>
    
    <item>
      <title>重構實例介紹 – 分析篇</title>
      <link>https://jaceju.net/refactoring-1/</link>
      <pubDate>Thu, 06 Jan 2011 00:00:00 +0800</pubDate>
      
      <guid>https://jaceju.net/refactoring-1/</guid>
      <description>重構是什麼？這問題其實真的很難回答。 我個人覺得重構是一種讓程式保持活力的一種方法，讓它能隨著時間而不斷地進化。如果我們一直放任自己不對程式碼</description>
    </item>
    
    <item>
      <title>重構實例介紹 – 實戰篇</title>
      <link>https://jaceju.net/refactoring-2/</link>
      <pubDate>Thu, 06 Jan 2011 00:00:00 +0800</pubDate>
      
      <guid>https://jaceju.net/refactoring-2/</guid>
      <description>接續前篇：重構實例介紹 - 分析篇 在上一篇中，我們分析了該功能的每段程式碼，也瞭解有哪些地方需要改進，接著我們就來進入實戰的階段。 在實戰的階段，</description>
    </item>
    
  </channel>
</rss>