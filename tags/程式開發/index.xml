<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程式開發 on 網站製作學習誌</title>
    <link>https://jaceju.net/tags/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/</link>
    <description>Recent content in 程式開發 on 網站製作學習誌</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 09 May 2018 20:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://jaceju.net/tags/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>重構或重寫 Legacy code 的幾個階段</title>
      <link>https://jaceju.net/steps-of-refactoring-or-rebuilding/</link>
      <pubDate>Wed, 09 May 2018 20:00:00 +0800</pubDate>
      
      <guid>https://jaceju.net/steps-of-refactoring-or-rebuilding/</guid>
      <description>看完前一篇的介紹，我想你應該已經想好面對 legacy code 時，應該要重構還是重寫了。如果你打算對正在線上的程式碼進行重構，那就像在幫飛行中的飛機換引擎一樣</description>
    </item>
    
    <item>
      <title>面對 Legacy Code ，該重構還是重寫？</title>
      <link>https://jaceju.net/refactor-or-rebuild/</link>
      <pubDate>Wed, 09 May 2018 20:00:00 +0800</pubDate>
      
      <guid>https://jaceju.net/refactor-or-rebuild/</guid>
      <description>在程式已經上線很久很久的情況下，公司也找了不少人來維護這些程式碼；而因為開發者來來去去，加上每個人對程式開發的觀念不同，他們也許都有過這樣的</description>
    </item>
    
    <item>
      <title>將測試融入開發，讓程式擁有品質</title>
      <link>https://jaceju.net/my-first-tdd/</link>
      <pubDate>Sat, 12 Jun 2010 00:00:00 +0800</pubDate>
      
      <guid>https://jaceju.net/my-first-tdd/</guid>
      <description>很多書上和網路的文章都提到了很 TDD 的做法，不過老實說我並沒有實際參與這些大師的 TDD 過程，其實很難把他們的方法百分之分地應用到自己的專案裡。 因此，</description>
    </item>
    
    <item>
      <title>關於測試這件事</title>
      <link>https://jaceju.net/about-testing/</link>
      <pubDate>Fri, 14 May 2010 00:00:00 +0800</pubDate>
      
      <guid>https://jaceju.net/about-testing/</guid>
      <description>為什麼要測試？ 因為我們沒辦法保證程式碼是萬無一失的，所以通常我們都會需要驗證我們的程式，而測試就是其中一種方法。很多工程師都在寫完程式之後，</description>
    </item>
    
  </channel>
</rss>