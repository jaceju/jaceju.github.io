<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>網站製作學習誌</title>
    <link>https://jaceju.net/</link>
    <description>Recent content on 網站製作學習誌</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 26 Dec 2019 16:59:15 +0800</lastBuildDate>
    
	<atom:link href="https://jaceju.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我的 2019 年</title>
      <link>https://jaceju.net/my-2019/</link>
      <pubDate>Thu, 26 Dec 2019 16:59:15 +0800</pubDate>
      
      <guid>https://jaceju.net/my-2019/</guid>
      <description>又到了一年的尾聲了，年初回顧了去年的點點滴滴，趁著今年還有一點點時間，也應該好好來整理一下自己做了哪些事。 要把 2019 年我做的事總結成一句話的話，</description>
    </item>
    
    <item>
      <title>關於 PHP Traversing 的這檔事</title>
      <link>https://jaceju.net/all-about-php-traversing/</link>
      <pubDate>Tue, 24 Dec 2019 10:37:59 +0800</pubDate>
      
      <guid>https://jaceju.net/all-about-php-traversing/</guid>
      <description>foreach 大概是 PHP 程式中最常見的語法結構之後，本文將會介紹 foreach 的一些觀念，以及幾個跟它相關的 PHP 7 特色。 foreach 起手式 常見的 foreach 用法 一般我們最常看到 foreach 用在遍歷 (traversing)</description>
    </item>
    
    <item>
      <title>《遺留系統重建實戰》導讀與心得</title>
      <link>https://jaceju.net/review-reengineering-legacy-software/</link>
      <pubDate>Wed, 06 Mar 2019 12:31:33 +0800</pubDate>
      
      <guid>https://jaceju.net/review-reengineering-legacy-software/</guid>
      <description>最近終於把《遺留系統重建實戰》看完了，有一種被深深震憾的感覺；你知道在看一本書時，能深刻地把自己的經驗投射在字裡行間是多爽的一件事嗎？每看一</description>
    </item>
    
    <item>
      <title>在 Laravel 專案中整合 Vue CLI</title>
      <link>https://jaceju.net/integrate-vue-cli-into-laravel/</link>
      <pubDate>Tue, 12 Feb 2019 14:27:08 +0800</pubDate>
      
      <guid>https://jaceju.net/integrate-vue-cli-into-laravel/</guid>
      <description>自從 Vue CLI 3 發佈以來，如何將它整合在 Laravel 裡是不少開發者的疑問；因此 Vue 的老爸尤雨溪便針對這個問題寫了一個教學範例 ，本文即是參考該範例所寫，不過有根</description>
    </item>
    
    <item>
      <title>我如何從需求出發到完成一個專案</title>
      <link>https://jaceju.net/how-i-built-my-side-project/</link>
      <pubDate>Wed, 30 Jan 2019 12:04:37 +0800</pubDate>
      
      <guid>https://jaceju.net/how-i-built-my-side-project/</guid>
      <description>身為一個 Web 開發者，有時候我還是會問自己：「如果今天讓你一個人從頭開發出一個網站，你要怎麼開始呢？」這倒不是說我不知道怎麼做，而是要讓我自己徹</description>
    </item>
    
    <item>
      <title>Laravel 執行測試時出現 Function name must be a string</title>
      <link>https://jaceju.net/function-name-must-be-a-string-in-laravel-testing/</link>
      <pubDate>Mon, 28 Jan 2019 12:26:42 +0800</pubDate>
      
      <guid>https://jaceju.net/function-name-must-be-a-string-in-laravel-testing/</guid>
      <description>在 Laravel 撰寫單元測試有用到 @dataProvider ，執行測試時卻出現 Function name must be a string 的錯誤。 這是因為所有的 Data Provider 會比 setUp 更早被執行，所以不能在 Data Provider 裡用任何在 setUp 後才會有的東西，</description>
    </item>
    
    <item>
      <title>身為前端工程師，對你來說，你認為最重要的是什麼？</title>
      <link>https://jaceju.net/what-is-essential-to-frontend-engineers/</link>
      <pubDate>Tue, 15 Jan 2019 00:06:19 +0800</pubDate>
      
      <guid>https://jaceju.net/what-is-essential-to-frontend-engineers/</guid>
      <description>好友 Kuro 公開問了這個問題，嘗試挑戰一下。不過主要也只是整理了一下我從身邊的前端同事及社群朋友們上看到的一些特質，畢竟比起我來，他們在前端領域打</description>
    </item>
    
    <item>
      <title>我的 2018 年</title>
      <link>https://jaceju.net/my-2018/</link>
      <pubDate>Wed, 02 Jan 2019 01:01:30 +0800</pubDate>
      
      <guid>https://jaceju.net/my-2018/</guid>
      <description>又過了一年了， 2018 年只在這個部落格零零落落地加了幾篇文章，感覺自己似乎沒什麼長進。最近寫作的機會大多是在專案的文件上，對於技術知識的研究與自己</description>
    </item>
    
    <item>
      <title>在 Laravel 中使用 Behat 來加強測試的可讀性 - 進階篇</title>
      <link>https://jaceju.net/behat-in-laravel-advance/</link>
      <pubDate>Fri, 09 Nov 2018 18:38:53 +0800</pubDate>
      
      <guid>https://jaceju.net/behat-in-laravel-advance/</guid>
      <description>在上一篇文章中，我介紹了如何把 Behat 整合到 Laravel 裡；不過後來我發現在專案規格越來越複雜時，把所有 step definitions 都寫在 FeatureContext 類別中變得非常不易閱讀。另一個問題就是我</description>
    </item>
    
    <item>
      <title>在 Laravel 中使用 Behat 來加強測試的可讀性 - 基礎篇</title>
      <link>https://jaceju.net/behat-in-laravel/</link>
      <pubDate>Thu, 08 Nov 2018 18:30:00 +0800</pubDate>
      
      <guid>https://jaceju.net/behat-in-laravel/</guid>
      <description>Laravel 的測試框架是基於 PHPUnit 上所建立出來的，而在 Laravel 5.5 之後，測試框架的功能也大幅地加強了。只不過在越來越複雜的專案規格下，我個人覺得 PHPUnit 在情境案例的描述</description>
    </item>
    
  </channel>
</rss>